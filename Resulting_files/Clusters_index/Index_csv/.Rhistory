if (print == TRUE){
print(paste("Simpson gives", integral))}
return(integral = integral)
}
Newton_Method = function(f, fp, x, eps = 10^(-5), type = 4){
# fp is the derivative function of f.
N = 0;  err = 10; err_set = NULL
while(err > eps & N <= 1000){
x0 = x
x = x - f(x) / fp(x)
err = abs(x - x0)
err_set = c(err_set, err)
N = N + 1
}
return(list(solution = x, num_repeat = N,
errors = round(err_set,4)))
}
func_y = function(x){
if(x>0){
exp(-0.5*x) * x^(-0.5)/ (2^(1.5) * gamma(3/2))
}else{
0
}
}
Simpson_fun = function(x){Simpson_rule(func_y, 0, x,
n = 1000, print = FALSE) - 0.5}
Newton_Method(Simpson_fun, func_y, x=3)
f=Simpson_fun
fp=func_y
eps = 10^(-5)
Simpson_rule = function(f, a, b, n, print = TRUE){
if (n %% 2 != 0){
return("Choose an even integer n!")}
if (n < 5){
return("Choose a larger integer n!")}
x0 = min(a,b);  xn = max(a,b)
h = (xn - x0)/n
x_seq = seq(x0,xn,h)  # x_seq[1] = x_0
integral = 0
for (i in seq(0,n-2,2)){
integral= integral +
h/3*(f(x_seq[i+1]) + 4*f(x_seq[i+2]) + f(x_seq[i+3]))}
if (print == TRUE){
print(paste("Simpson gives", integral))}
return(integral = integral)
}
Newton_Method = function(f, fp, x, eps = 10^(-5)){
# fp is the derivative function of f.
N = 0;  err = 10; err_set = NULL
while(err > eps & N <= 1000){
x0 = x
x = x - f(x) / fp(x)
err = abs(x - x0)
err_set = c(err_set, err)
N = N + 1
}
return(list(solution = x, num_repeat = N,
errors = round(err_set,4)))
}
func_y = function(x){
if(x>0){
exp(-0.5*x) * x^(-0.5)/ (2^(1.5) * gamma(3/2))
}else{
0
}
}
Simpson_fun = function(x){Simpson_rule(func_y, 0, x,
n = 1000, print = FALSE) - 0.5}
Newton_Method(Simpson_fun, func_y, x=3)
f
fp
N = 0;  err = 10; err_set = NULL
while(err > eps & N <= 1000){
x0 = x
x = x - f(x) / fp(x)
err = abs(x - x0)
err_set = c(err_set, err)
N = N + 1
}
x
x=3
N = 0;  err = 10; err_set = NULL
while(err > eps & N <= 1000){
x0 = x
x = x - f(x) / fp(x)
err = abs(x - x0)
err_set = c(err_set, err)
N = N + 1
}
x0
x
f(x)
fp(x)
Newton_Method(Simpson_fun, func_y, x=1)
qchisq(0.5, 3)
qchisq(0.5, 3)
Newton_Method(Simpson_fun, func_y, x=2)
Newton_Method(Simpson_fun, func_y, x=4)
Bisection = function(f, x0, x1, eps = 10^(-5)){
if (f(x0) * f(x1) >0){
return("wrong initial interval!")}
N = 0;  err = x1 - x0
while(err > eps & N <= 1000){ x2 = (x0 + x1)/2
if (f(x0) * f(x2) < 0){x1 = x2
} else {
x0 = x2}
err = x1 - x0
N = N + 1
}
return((x0 + x1)/2)
}
func_y = function(x){
if(x>0){
exp(-0.5*x) * x^(-0.5)/ (2^(1.5) * gamma(3/2))
}else{
0
}
}
Simpson_fun = function(x){Simpson_rule(func_y, 0, x,
n = 1000, print = FALSE) - 0.5}
Newton_Method(Simpson_fun, func_y, x=4)
Bisection(Simpson_fun, 1, 3)
qchisq(0.5, 3)
func_y = function(x){
if(x>0){
exp(-1.5*x) * x^(-0.5)/ (2^(1.5) * gamma(3/2))
}else{
0
}
}
Simpson_fun = function(x){Simpson_rule(func_y, 0, x,
n = 1000, print = FALSE) - 0.5}
Newton_Method(Simpson_fun, func_y, x=4)
Bisection(Simpson_fun, 1, 3)
Simpson_fun(1)
Simpson_fun(2)
Simpson_fun(3)
Simpson_fun(4)
Simpson_fun(5)
Simpson_fun(6)
Simpson_fun(10)
func_y = function(x){
if(x>0){
exp(-0.5*x) * x^(0.5)/ (2^(1.5) * gamma(3/2))
}else{
0
}
}
Simpson_fun = function(x){Simpson_rule(func_y, 0, x,
n = 1000, print = FALSE) - 0.5}
Newton_Method(Simpson_fun, func_y, x=4)
Bisection(Simpson_fun, 1, 3)
qchisq(0.5, 3)
qchisq(0.5, 3)
my_fun=function(x){x^4 - 3*x^3 + 2*x^2 + 5*x + 2}
mu_fun2=function(x){x^4 - 3*x^3 + 0.5*x^2 + 3*x + 1}
curve(my_fun, -1, 1, xaxt="n", ylim = c(0,7))
curve(mu_fun2, -1, 1, add = TRUE,  lty=2, col = "blue")
my_fun=function(x){x^4 - 3*x^3 + 2*x^2 + 5*x + 2}
#mu_fun2=function(x){x^4 - 3*x^3 + 0.5*x^2 + 3*x + 1}
curve(my_fun, -1, 1, ylim = c(0,7))
#curve(mu_fun2, -1, 1, add = TRUE,  lt
Forward_Backward_Central(my_fun, -0.2, h=0.0001)
Forward_Backward_Central = function(f, x, h, type = 3,
print = TRUE){
if (h <= 0){
return("Choose positive h!")}
if (type == 1){
derivative = (f(x+h)-f(x))/h
Type = "Forward"} else if (type ==2){
derivative = (f(x)-f(x-h))/h
Type = "Backward"} else{
derivative = (f(x+h)-f(x-h))/(2*h); Type = "Central"}
if (print == TRUE){
print(paste(Type, "gives the derivative value",
derivative,
"of the function f at the point", x))}
return(derivative)
}
Forward_Backward_Central(my_fun, -0.2, h=0.0001)
Forward_Backward_Central = function(f, x, h, type = 3,
print = TRUE){
if (h <= 0){
return("Choose positive h!")}
if (type == 1){
derivative = (f(x+h)-f(x))/h
Type = "Forward"} else if (type ==2){
derivative = (f(x)-f(x-h))/h
Type = "Backward"} else{
derivative = (f(x+h)-f(x-h))/(2*h); Type = "Central"}
if (print == TRUE){
print(paste(Type, "gives the derivative value",
derivative,
"of the function f at the point", x))}
return(derivative = derivative)
}
my_fun=function(x){x^4 - 3*x^3 + 2*x^2 + 5*x + 2}
#mu_fun2=function(x){x^4 - 3*x^3 + 0.5*x^2 + 3*x + 1}
curve(my_fun, -1, 1, ylim = c(0,7))
#curve(mu_fun2, -1, 1, add = TRUE,  lty=2, col = "blue")
Forward_Backward_Central(my_fun, -0.2, h=0.0001)
Forward_Backward_Central = function(f, x, h, type = 3,
print = TRUE){
if (h <= 0){
return("Choose positive h!")}
if (type == 1){
derivative = (f(x+h)-f(x))/h
Type = "Forward"} else if (type ==2){
derivative = (f(x)-f(x-h))/h
Type = "Backward"} else{
derivative = (f(x+h)-f(x-h))/(2*h); Type = "Central"}
return(derivative = derivative)
}
my_fun=function(x){x^4 - 3*x^3 + 2*x^2 + 5*x + 2}
#mu_fun2=function(x){x^4 - 3*x^3 + 0.5*x^2 + 3*x + 1}
curve(my_fun, -1, 1, ylim = c(0,7))
#curve(mu_fun2, -1, 1, add = TRUE,  lty=2, col = "blue")
Forward_Backward_Central(my_fun, -0.2, h=0.0001)
my_fun_prime=function(x){4*x^3 - 9*x^2 + 4*x + 5}
derivative = Forward_Backward_Central(my_fun, -0.2, h=0.0001)
my_fun_prime(-0.2)
my_fun(-0.2)
tangent_line = function(x){my_fun_prime(-0.2)*(x+0.2) +  my_fun(-0.2)}
curve(my_fun, -1, 1, ylim = c(0,7))
curve(tangent_line, -1, 1, add = TRUE,  lty=2, col = "blue")
curve(my_fun, -1, 1, ylim = c(0,7),  xaxt="n")
curve(tangent_line, -1, 1, add = TRUE,  lty=2, col = "blue")
points(-0.2, my_fun(-0.2), pch = 19)
axis(side = 1, at = c(-1,-0.2,1), labels = c("-1", "-0.2", "1"),
cex.axis = 2)
legend(-1, 7, legend=c(expression(f(x) = x^4-3*x^3 + 2*x^2 + 5*x + 2), "tangent line at (-0.2, f(-0.2))"),
col=c("black", "blue"), lty=1:2, cex=1.5)
legend(-1, 7, legend=c(expression(f(x) = x^4-3*x^3 + 2*x^2 + 5*x + 2), "tangent line at (-0.2, f(-0.2))"),
col=c("black", "blue"), lty=1:2, cex=1.5)
curve(my_fun, -1, 1, ylim = c(0,7),  xaxt="n")
curve(tangent_line, -1, 1, add = TRUE,  lty=2, col = "blue")
points(-0.2, my_fun(-0.2), pch = 19)
axis(side = 1, at = c(-1,-0.2,1), labels = c("-1", "-0.2", "1"),
cex.axis = 2)
legend(-1, 7, legend=c(expression(f(x) = x^4-3*x^3 + 2*x^2 + 5*x + 2), "tangent line at (-0.2, f(-0.2))"),
col=c("black", "blue"), lty=1:2, cex=1.5)
legend(-1, 7,
legend=expression(f(x) = x^4-3*x^3 + 2*x^2 + 5*x + 2, paste("tangent line at", (-0.2, f(-0.2)))),
col=c("black", "blue"), lty=1:2, cex=1.5)
legend(-1, 7,
legend=expression(f(x) = x^4-3*x^3 + 2*x^2 + 5*x + 2, "tangent line"),
col=c("black", "blue"), lty=1:2, cex=1.5)
legend(-1, 7,  legend=expression(f(x) = x^4-3*x^3 + 2*x^2 + 5*x + 2, "tangent line"),
col=c("black", "blue"), lty=1:2, cex=1.5)
legend(-1, 7,  legend=expression(x^4-3*x^3 + 2*x^2 + 5*x + 2, "tangent line"),
col=c("black", "blue"), lty=1:2, cex=1.5)
curve(my_fun, -1, 1, ylim = c(0,7),  xaxt="n")
curve(tangent_line, -1, 1, add = TRUE,  lty=2, col = "blue")
points(-0.2, my_fun(-0.2), pch = 19)
axis(side = 1, at = c(-1,-0.2,1), labels = c("-1", "-0.2", "1"),
cex.axis = 2)
legend(-1, 7,  legend=expression(paste("f(x)", x^4-3*x^3 + 2*x^2 + 5*x + 2), "tangent line at (-0.2, f(-0.2))"),
col=c("black", "blue"), lty=1:2, cex=1.5)
curve(my_fun, -1, 1, ylim = c(0,7),  xaxt="n")
curve(tangent_line, -1, 1, add = TRUE,  lty=2, col = "blue")
points(-0.2, my_fun(-0.2), pch = 19)
axis(side = 1, at = c(-1,-0.2,1), labels = c("-1", "-0.2", "1"),
cex.axis = 2)
legend(-1, 7,  legend=expression(paste("f(x)", x^4-3*x^3 + 2*x^2 + 5*x + 2), "tangent line at (-0.2, f(-0.2))"),
col=c("black", "blue"), lty=1:2, cex=1)
curve(my_fun, -1, 1, ylim = c(0,7),  xaxt="n")
curve(tangent_line, -1, 1, add = TRUE,  lty=2, col = "blue")
points(-0.2, my_fun(-0.2), pch = 19)
axis(side = 1, at = c(-1,-0.2,1), labels = c("-1", "-0.2", "1"),
cex.axis = 2)
legend(-1, 7,  legend=expression(paste("f(x)=", x^4-3*x^3 + 2*x^2 + 5*x + 2), "tangent line at (-0.2, f(-0.2))"),
col=c("black", "blue"), lty=1:2, cex=1.2)
curve(my_fun, -1, 1, ylim = c(0,7),  xaxt="n", ylab="y value")
curve(tangent_line, -1, 1, add = TRUE,  lty=2, col = "blue")
points(-0.2, my_fun(-0.2), pch = 19)
axis(side = 1, at = c(-1,-0.2,1), labels = c("-1", "-0.2", "1"),
cex.axis = 2)
legend(-1, 7,  legend=expression(paste("f(x)=", x^4-3*x^3 + 2*x^2 + 5*x + 2), "tangent line at (-0.2, f(-0.2))"),
col=c("black", "blue"), lty=1:2, cex=1.2)
curve(my_fun, -1, 1, ylim = c(0,7),  xaxt="n", ylab="y value", xlab="x value")
curve(tangent_line, -1, 1, add = TRUE,  lty=2, col = "blue")
points(-0.2, my_fun(-0.2), pch = 19)
axis(side = 1, at = c(-1,-0.2,1), labels = c("-1", "-0.2", "1"),
cex.axis = 2)
legend(-1, 7,  legend=expression(paste("f(x)=", x^4-3*x^3 + 2*x^2 + 5*x + 2), "tangent line at (-0.2, f(-0.2))"),
col=c("black", "blue"), lty=1:2, cex=1.2)
curve(my_fun, -1, 1, ylim = c(0,7),  xaxt="n", ylab="y value", xlab="x value")
curve(tangent_line, -1, 1, add = TRUE,  lty=2, col = "blue")
points(-0.2, my_fun(-0.2), pch = 19)
axis(side = 1, at = c(-1,-0.2,1), labels = c("-1", "-0.2", "1"),
cex.axis = 2)
legend(-1, 7,  legend=expression(paste("f(x)=", x^4-3*x^3 + 2*x^2 + 5*x + 2), "tangent line at (-0.2, f(-0.2))"),
col=c("black", "blue"), lty=1:2, cex=1.2)
derivative
my_fun_prime(-0.2)
x=1
x[1]
x=1
x[1]
x[2] = 5
x
x[4] =4
x
x<-0
y<- 0
z<-0
err = 100
err_set<- NULL
i=2
siedel<- function(x,y,z){
while(err >= 10^(-3) ){
x[i] <- (-6*y[i-1])-(3*z[i-1])+25/4
y[i] <-(2*x[i])+(5*z[i-1])-13/2
z[i] <- (8*x[i])+(3*y[i])+4/6
err=abs(x[i]-x[i-1])+abs(y[i]-y[i-1])+abs(x[i]-z[i-1])
err_set <-c(err_set,err)
i=i+1
}
result <- list( "i"=i, "soultion"=c(x[i],y[i],z[i]),"Err" =err)
return(result)
}
siedel(x,y,z)
while(err >= 10^(-3) ){
x[i] <- (-6*y[i-1])-(3*z[i-1])+25/4
y[i] <-(2*x[i])+(5*z[i-1])-13/2
z[i] <- (8*x[i])+(3*y[i])+4/6
err=abs(x[i]-x[i-1])+abs(y[i]-y[i-1])+abs(x[i]-z[i-1])
err_set <-c(err_set,err)
i=i+1
}
i
x
y
z
y
A=matrix(c(4,2,8, 6,-2,3, 3,5,-6), ncol=3)
A
eigen(A)
eigen(A)
integrate(x^3+x, 0, 1)
integrate(function(x){x^3+x}, 0, 1)
integrate(function(x){x^3+x}, 0, 1)$value
x_group=c(1,2,3,4)
sapply(x_group, funcion(x){x^4})
x_group
funcion(x){x^4}
sapply(x_group, x^4)
myfun1 = funcion(x){x^4}
sapply(x_group, myfun1)
sapply(x_group, function(x){x^4})
cbind(sapply(x_group, function(x){x^3}),sapply(x_group, function(x){x^2}),sapply(x_group, function(x){x^1}),sapply(x_group, function(x){1}))
Simpson_rule = function(f, a, b, n = 1000){
if (n %% 3 != 0){
return("Choose a multiple of 3 for n!")}
if (n < 5){
return("Choose a larger integer n!")}
x0 = min(a,b);  xn = max(a,b)
h = (xn - x0)/n
x_seq = seq(x0,xn,h)  # x_seq[1] = x_0
integral = 0
for (i in seq(0,n-3,3)){
x_group = c(x_seq[i+1],  x_seq[i+2], x_seq[i+3], x_seq[i+4])
A = cbind(sapply(x_group, function(x){x^3}),sapply(x_group, function(x){x^2}),sapply(x_group, function(x){x^1}),sapply(x_group, function(x){1}))
b = f(x_group)
z = solve(A,b)
obt_fun = function(x){z[1]*x^3 + z[2]*x^2 + z[3]*x + z[4]}
integral= integral + integrate(obt_fun,x_seq[i+1],x_seq[i+4])}
return(integral = integral)
}
Simpson_rule_cubic = function(f, a, b, n = 1000){
if (n %% 3 != 0){
return("Choose a multiple of 3 for n!")}
if (n < 5){
return("Choose a larger integer n!")}
x0 = min(a,b);  xn = max(a,b)
h = (xn - x0)/n
x_seq = seq(x0,xn,h)  # x_seq[1] = x_0
integral = 0
for (i in seq(0,n-3,3)){
x_group = c(x_seq[i+1],  x_seq[i+2], x_seq[i+3], x_seq[i+4])
A = cbind(sapply(x_group, function(x){x^3}),sapply(x_group, function(x){x^2}),sapply(x_group, function(x){x^1}),sapply(x_group, function(x){1}))
b = f(x_group)
z = solve(A,b)
obt_fun = function(x){z[1]*x^3 + z[2]*x^2 + z[3]*x + z[4]}
integral= integral + integrate(obt_fun,x_seq[i+1],x_seq[i+4])}
return(integral = integral)
}
my_fun = function(x){exp(x) + cos(x) - sin(x) * cos(x)}
integrate(my_fun, 0, 3)$value
Simpson_rule_cubic
Simpson_rule_cubic(my_fun, 0, 3)
integrate(my_fun, 0, 3)$value
Simpson_rule_cubic = function(f, a, b, n = 999){
if (n %% 3 != 0){
return("Choose a multiple of 3 for n!")}
if (n < 5){
return("Choose a larger integer n!")}
x0 = min(a,b);  xn = max(a,b)
h = (xn - x0)/n
x_seq = seq(x0,xn,h)  # x_seq[1] = x_0
integral = 0
for (i in seq(0,n-3,3)){
x_group = c(x_seq[i+1],  x_seq[i+2], x_seq[i+3], x_seq[i+4])
A = cbind(sapply(x_group, function(x){x^3}),sapply(x_group, function(x){x^2}),sapply(x_group, function(x){x^1}),sapply(x_group, function(x){1}))
b = f(x_group)
z = solve(A,b)
obt_fun = function(x){z[1]*x^3 + z[2]*x^2 + z[3]*x + z[4]}
integral= integral + integrate(obt_fun,x_seq[i+1],x_seq[i+4])$value}
return(integral = integral)
}
my_fun = function(x){exp(x) + cos(x) - sin(x) * cos(x)}
Simpson_rule_cubic(my_fun, 0, 3)
integrate(my_fun, 0, 3)$value
Simpson_rule(my_fun, 0, 3, n = 1000, print = FALSE)
Simpson_rule
Simpson_rule = function(f, a, b, n = 1000, print = TRUE){
if (n %% 2 != 0){
return("Choose an even integer n!")}
if (n < 5){
return("Choose a larger integer n!")}
x0 = min(a,b);  xn = max(a,b)
h = (xn - x0)/n
x_seq = seq(x0,xn,h)  # x_seq[1] = x_0
integral = 0
for (i in seq(0,n-2,2)){
integral= integral +
h/3*(f(x_seq[i+1]) + 4*f(x_seq[i+2]) + f(x_seq[i+3]))}
if (print == TRUE){
print(paste("Simpson gives", integral))}
return(integral = integral)
}
Simpson_rule_cubic = function(f, a, b, n = 999){
if (n %% 3 != 0){
return("Choose a multiple of 3 for n!")}
if (n < 5){
return("Choose a larger integer n!")}
x0 = min(a,b);  xn = max(a,b)
h = (xn - x0)/n
x_seq = seq(x0,xn,h)  # x_seq[1] = x_0
integral = 0
for (i in seq(0,n-3,3)){
x_group = c(x_seq[i+1],  x_seq[i+2], x_seq[i+3], x_seq[i+4])
A = cbind(sapply(x_group, function(x){x^3}),sapply(x_group, function(x){x^2}),sapply(x_group, function(x){x^1}),sapply(x_group, function(x){1}))
b = f(x_group)
z = solve(A,b)
obt_fun = function(x){z[1]*x^3 + z[2]*x^2 + z[3]*x + z[4]}
integral= integral + integrate(obt_fun,x_seq[i+1],x_seq[i+4])$value}
return(integral = integral)
}
my_fun = function(x){exp(x) + cos(x) - sin(x) * cos(x)}
Simpson_rule_cubic(my_fun, 0, 3)
integrate(my_fun, 0, 3)$value
Simpson_rule(my_fun, 0, 3, n = 1000, print = FALSE)
getwd()
View(NMF_RNA)
View(Hs)
View(UpdateW)
NITUMID_simple
getwd()
setwd("/Users/seyoungpark/Downloads/codes6")
dat<-read.table("clinical1.txt",sep = "\t",header = T,stringsAsFactors = F)
dat2<-read.table("clinical2.txt",sep = "\t",header = T,stringsAsFactors = F)
dim(dat)
dim(dat2)
dat[1:5,1:5]
dat2[1:5,1:5]
head(dat)
head(dat)
head(dat2)
max(dat$disease_code)
length(dat$disease_code)
summary(dat$disease_code)
summary(dat)
mode(dat$disease_code)
dat$disease_code
dat2$disease_code
sort(dat$disease_code)
sort(dat2$disease_code)
summary(dat2$disease_code)
median(dat2$disease_code)
dat2$disease_code
dat2$disease_code
unique(dat$disease_code)
unique(dat2$disease_code)
length(unique(dat$disease_code))
head(dat)
head(dat2)
dat3<-read.table("clinical.txt",sep = "\t",header = T,stringsAsFactors = F)
dat3<-read.table("clinical.txt",sep = "\t",header = T,stringsAsFactors = F)
head(dat3)
dim(dat3)
dim(dat)
pwd
getwd()
setwd("/Users/seyoungpark/Documents/GitHub/MKerW-A/Resulting_files/Clusters_index/Index_csv")
aaa=read.csv("cancer11.csv")
bbb=read.csv("cancer11_2.csv")
dim(aaa)
dim(bbb)
head(aaa)
head(bbb)
aaa2=read.csv("cancer20.csv")
bbb2=read.csv("cancer20_2.csv")
dim(aaa2)
dim(bbb2)
head(aaa2)
head(bbb2)
dim(aaa)
dim(aaa2)
dim(bbb2)
dim(aaa)
dim(aaa2)
